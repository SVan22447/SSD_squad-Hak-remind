import json
import logging
from collections import defaultdict
from typing import Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    filters,
    Application, 
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    ContextTypes,
)

with open('config.json', 'r') as f:
    config = json.load(f)
token = config["TOKEN"]
MENU, TEAM, Local = range(3)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display a message with a button."""
    keyboard = [
        [InlineKeyboardButton("Команды", callback_data='commands'),
         InlineKeyboardButton("Личные напоминания", callback_data='personal_reminders')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Пожалуйста выберите:", reply_markup=reply_markup)
    return MENU

    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    await query.answer()

    if query.data == 'commands':
        keyboard = [
            [InlineKeyboardButton("Создать команду", callback_data='create_team'),
             InlineKeyboardButton("Просмотреть команды", callback_data='view_teams')],
            [InlineKeyboardButton("Назад", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выберите действие с командами:", reply_markup=reply_markup)
        return TEAM

    elif query.data == 'personal_reminders':
        keyboard = [
            [InlineKeyboardButton("Создать напоминание", callback_data='create_reminder'),
             InlineKeyboardButton("Просмотреть напоминания", callback_data='view_reminders')],
            [InlineKeyboardButton("Назад", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Выберите действие с напоминаниями:", reply_markup=reply_markup)
        return Local

    elif query.data == 'back':
        await start(update, context)
def main() -> None:
    """Run the bot."""
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

if __name__ == "__main__":
    main()
